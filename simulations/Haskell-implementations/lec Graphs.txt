Graphs are represented using a tuple;

G = (V,E) where,
	V = {v_1,v_2,v_3,..v_n}  (set of vertices/nodes)
	E = {(v_i,v_j)|There exists an edge between v_i and v_j}  (set of edges)
	If it is a directed graph, v_i is the source, v_j is the target vertex.

Functions supported:
	-add_edge
	-remove_edge
	edge_exists
	in_degree
	out_degree

There are also other representations. One is the adjacency matrix and the other is the adjacency list.
**Adjacency Matrix
	-Adjacency Matrix is an nxn matrix, where n is the number of vertices:
		Adjacent: if there is an edge for two vertices, the two vertices are called adjacent.
		Degree : How many edges are connected to a node;
			in_degree : how many edges are going into a node,
			out_degree: how many edges are coming out of a node.

	-AdjacencyList
		0	1	2	3	4	5	6	7	8	9	10	11
	0		1			1
	1	1		1			1	1
	2		1		1			1
	3			1					1
	4	1					1			1
	5		1	1		1	1				1
	6			1			1		1			1				
	7				1			1					11
	8					1					1
	9						1			1		1	
	10							1			1		1
	11								1			1

	Therefore,
	indegree of a node is the sum of all 1s in the row of the node;
	outdegree of a node is the sum of all 1s in the column of the node.

	A symmetric matrix would denote an undirected graph.

	Number of all edges (directed matrix) is the sum of all 1s in the matrix.
	Number of all edges (undirected matrix) is the sum of all 1s in the matrix/2.

	Sum of all in_degrees = sum of all out_degrees. (each out has an in)
	sum of all degrees is even. Both for directed and undirected graph.
	Why?
		for directed: Sum of in_degrees + sum of out_degrees = 2k (because in_degrees = out_degrees)
		for undirected: sum of all_degrees, we are counting each edge twice. = 2k_2.

	for adjacency matrix,
	add_edge(i,j) = insert 1 at (i,j) for directed.
					insert 1 at (i,j) and (j,1) for undirected.
			O(1)

	remove_edge(i,j) = insert 0 at i,j for directed.
						insert two 0s at i,j and j,i for undirected.
			O(1)

	edge_exists(i,j) = True if 1 at i,j
			O(1)

	in_degree(i) = sum of row(i)
			O(n), n is number of vertices

	out_degree(i) = sum of column(i)
			O(n), n is number of vertices

	Maximum number of edges for complete graph = n(n-1)/2 = O(n^2)
	If a graph is close to complete, then it is a dense graph.
	If a graph is sparse, then this representation is a waste of memory.

New representation:
**Adjacency List
List is the source. It's list is the target.
	0 --> [1,4]
	1 --> [0,2,5,6]
	2 --> [1,3,6]
	3 --> [2,7]
	4 --> [0,5,8]
	5 --> [1,2,4,6]
	6 --> [2,5,7,10]
	7 --> [3,6,11]
	8 --> [4,9]
	9 --> [5,8,10]
	10--> [6,9,11]
	11--> [7,10]

	add_edge(i,j)	if directed, add j to the list of i.
					undirected, also add i to list of j
		O(1), but we need to find first, therefore O(n)

	remove_edge(i,j) if directed, remove j from list of i
					undirected, also remove i from list of j
		O(n) because we need to find j
	edge_exists(i,j) go to list i, true if j exists in the list.
		O(n) because find
	in_degree(i)	go to each list, add if i in list.
		O(n^2)
	out_degree(i)	length of list i.
		O(1) for a good length implementation

	This representation has a worst complexity but takes up less space.

Therefore there is a trade-off of time vs space. So in order to make something run faster, you end up taking more space. If you would like to save space, then complexity increases.

Lookup Tables

Traversals:
	BreadthFirst
	Start with node 0, see its neighbors, add to seen, then visit these neighbors.
	Therefore we use two data structures:
		list for storing which ones we visit, queue for storing which ones to process next
	O(ve), v is number of nodes, e is number of edges. Very Very loose, O(V^2)
	DepthFirst:
		list for storing which ones we visit, stack for storing which ones to process next